参考：
https://blog.csdn.net/cooldream2009/article/details/139873732
https://www.cnblogs.com/xiaxiaoshu/p/9073209.html

1.MVC（Model-View-Controller）

一种经典的设计模式，用于分离应用程序的不同组成部分。它包括以下三个主要组件：
模型（Model）：负责管理应用程序的数据和业务逻辑。
视图（View）：负责呈现数据给用户并接收用户输入。
控制器（Controller）：作为中介，处理用户输入并协调模型和视图之间的交互。

View 一般通过 Controller 来和 Model 进行联系。Controller是 Model 和 View 的协调者，View和Model不直接联系。基本联系都是单向的。
MVC模式的优点是清晰的分离关注点，使代码更易于维护和测试。然而，它可能导致控制器变得臃肿，并且在复杂应用中，视图和模型之间的通信可能变得复杂。

2.MVP（Model-View-Presenter）

旨在解决MVC模式中的一些问题。在MVP中，包括以下三个主要组件：
模型（Model）：同样负责管理数据和业务逻辑。
视图（View）：负责呈现数据和处理用户交互，但不处理业务逻辑。
展示器（Presenter）：负责处理用户输入、应用程序逻辑和视图更新。

各部分之间的通信，都是双向的。view 与 Model 不发生联系，都通过 Presenter 传递。
View 非常薄，不部署任何业务逻辑，称为"被动视图"（Passive View），即没有任何主动性，而 Presenter 非常厚，所有逻辑都部署在那里。
MVP模式的优点是更好的测试性和可维护性，因为业务逻辑被抽离到了Presenter中。这也使得视图可以更加独立地进行单元测试。然而，与MVC相比，它需要更多的代码和更复杂的通信。

3. MVVM：模型-视图-视图模型
MVVM（Model-View-ViewModel）是一种现代的设计模式，专注于绑定数据和视图。在MVVM中，包括以下三个主要组件：

模型（Model）：与前两种模式一样，负责管理数据和业务逻辑。
视图（View）：负责呈现数据，但不包含业务逻辑。
视图模型（ViewModel）：充当数据和视图之间的中介，负责数据绑定和处理用户输入。

MVVM模式的主要优点是双向数据绑定，使数据的变化能够实时反映在视图中，同时降低了视图和模型之间的直接依赖。这有助于创建响应式用户界面，并提高了开发效率。
然而，MVVM模式的学习曲线可能较陡峭，而且不适用于所有类型的应用程序。

4.MVC架构模式与分层模式的区别

MVC模式属于设计模式的范畴，就如同其他设计模式一样，模式的出现就是为了对某种功能的优化，而MVC模式可以看做是对三层架构中表现层的一种细分优化。
以我的理解，MVC模式就是分层模式中表示层最常用的架构模式。

详细阐述如下：
严格说这三个加起来以后才是三层架构中的表现层，也就是说，MVC把三层架构中的UI层再度进行了分化，分成了控制器、视图、实体三个部分，控制器完成页面逻辑，通过实体来与界面层完成通话；
而Controller层直接与三层中的业务逻辑层进行对话。三层和MVC可以共存。 三层是基于业务逻辑来分的，而MVC是基于页面来分的。
　　
三层架构的分层模式是典型的上下关系，上层依赖于下层。但MVC作为表现模式是不存在上下关系的，而是相互协作关系。即使将MVC当作架构模式，也不是分层模式。
MVC和三层架构基本没有可比性，是应用于不同领域的技术。