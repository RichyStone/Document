面向对象设计原则：

对接口编程而不是对实现编程。
优先使用对象组合而不是继承。

1、抽象类和接口的区别
1）接口可以被多继承，接口不能继承普通类，只能继承接口，可以多继承，抽象类不能多继承
2）接口可以有方法、自动属性、事件、索引器
抽象类可以有实例成员、方法、自动属性、构造函数
3）抽象类被继承后，子类需要重写所有抽象成员，实例成员不用重写，子类也是抽象类不用重写，由子类的子类重写；
接口的子类必须实现接口中的所有成员；
4）接口中的所有成员都不能有任何实现，不允许有方法体；
抽象类中的抽象成员必须标记为abstract，不能有任何实现。
5）都不能被实例化
6）接口中的成员默认访问修饰符为public，不能修改；
抽象成员的访问修饰符不能是private

2、封装 封装是为了防止对实现细节的访问，把写好的代码放入一个包装里，
使用者可以不考虑实现细节直接使用，也防止使用者对实现细节的破坏。

3、继承主要实现重用代码，节省开发时间，根据一个类来定义另一个类，子类继承了父类的属性和方法，但是子类并没有继承父类的私有字段。
1）继承的单根性：一个子类只能有一个父类。
2）继承的传递性

4、接口定义了所有类继承接口时应遵循的语法合同。接口定义了语法合同 "是什么" 部分，派生类定义了语法合同 "怎么做" 部分。
接口定义了属性、方法和事件，这些都是接口的成员。接口只包含了成员的声明。成员的定义是派生类的责任。
接口提供了派生类应遵循的标准结构。
接口使得实现接口的类或结构在形式上保持一致。
