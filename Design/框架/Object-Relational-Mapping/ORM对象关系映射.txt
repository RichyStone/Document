
参考：
https://blog.csdn.net/lisheng19870305/article/details/106919820
https://www.cnblogs.com/xiaotian0422/p/16496908.html
https://www.ruanyifeng.com/blog/2019/02/orm-tutorial.html

1.什么是ORM?
对象关系映射（Object Relational Mapping，简称ORM）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。
ORM框架是连接数据库的桥梁，只要提供了持久化类与表的映射关系，ORM框架在运行时就能参照映射文件的信息，把对象持久化到数据库中。

ORM框架：为了解决面型对象与关系数据库存在的互不匹配的现象的框架。

ORM的方法论基于三个核心原则：

简单：以最基本的形式建模数据
传达性：数据库结构被任何人都能理解的语言文档化
精确性：基于数据模型创建正确标准化了的结构

2.为什么使用ORM?
当我们实现一个应用程序时（不使用O/R Mapping），我们可能会写特别多数据访问层的代码，从数据库保存、删除、读取对象信息，而这些代码都是重复的。
而使用ORM则会大大减少重复性代码。对象关系映射（Object Relational Mapping，简称ORM），主要实现程序对象到关系数据库数据的映射。

3.对象-关系映射解释：
1.简单：ORM以最基本的形式建模数据。比如ORM会将MySQL的一张表映射成一个类（模型），表的字段就是这个类的成员变量
2.精确：ORM使所有的MySQL数据表都按照统一的标准精确地映射成类，使系统在代码层面保持准确统一
3.易懂：ORM使数据库结构文档化。比如MySQL数据库就被ORM转换为了程序员可以读懂的类，程序员可以只把注意力放在他擅长的层面
4.易用：ORM包含对持久类对象进行CRUD操作的API，例如create(), update(), save(), load(), find(), find_all(), where()等，
也就是讲sql查询全部封装成了编程语言中的函数，通过函数的链式组合生成最终的SQL语句。
通过这种封装避免了不规范、冗余、风格不统一的SQL语句，可以避免很多人为Bug，方便编码风格的统一和后期维护。
 
4.用例

在传统的数据读取操作中，我们以.net的方式对数据库进行CRUD操作，使用的基本都是SQL硬编码，比如有以下数据库查询操作：
String sql = "SELECT ... FROM persons WHERE id = 10";
DbCommand cmd = new DbCommand(connection, sql);
Result res = cmd.Execute();
String name = res[0]["FIRST_NAME"];

使用了ORM映射的C#实现的伪代码：
Person p = repository.GetPerson(10);
String name = p.getFirstName();

上面的示例代码表示我们可以从数据仓库repository中获取到一个实体对象，当然数据仓库中可能包含其他的方法，也可以定义自己的ORM实现，比如：
Person p = Person.Get(10);

通常，在处理ORM映射和数据仓库时会暴露一些过滤或者查询方法，允许客户端对数据集进行进一步的筛选等操作，比如代码演示从数据库中查询ID=10的用户：
Person p = Person.Get(Person.Properties.Id == 10);

5. ORM的优缺点：

优点：
1）提高开发效率，降低开发成本
2）使开发更加对象化
3）可移植
4）可以很方便地引入数据缓存之类的附加功能

缺点：
1）自动化进行关系数据库的映射需要消耗系统性能。其实这里的性能消耗还好啦，一般来说都可以忽略之。
2）在处理多表联查、where条件复杂之类的查询时，ORM的语法会变得复杂。
