创建型模式

这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。	
创建型模式就是用来创建对象的模式，抽象了实例化的过程。所有的创建型模式都有两个共同点。
第一，它们都将系统使用哪些具体类的信息封装起来；
第二，它们隐藏了这些类的实例是如何被创建和组织的。

一、工厂模式（Factory Pattern）

1.定义：
定义一个创建对象的接口，让其子类自己决定实例化哪一个类，工厂模式使其创建过程延迟到子类进行。

2.使用场景：
何时使用：我们明确地计划不同条件下创建不同实例时。
关键代码：创建过程在其子类执行。

3.优缺点：
优点： 
一个调用者想创建一个对象，只要知道其名称就可以了。 
扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 
屏蔽产品的具体实现，调用者只关心产品的接口。

缺点：
每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。

参考：https://www.cnblogs.com/zhili/p/FactoryMethod.html

4.角色：
工厂模式包含以下几个核心角色：
抽象产品（Abstract Product）：定义了产品的共同接口或抽象类。它可以是具体产品类的父类或接口，规定了产品对象的共同方法。
具体产品（Concrete Product）：实现了抽象产品接口，定义了具体产品的特定行为和属性。
抽象工厂（Abstract Factory）：声明了创建产品的抽象方法，可以是接口或抽象类。它可以有多个方法用于创建不同类型的产品。
具体工厂（Concrete Factory）：实现了抽象工厂接口，负责实际创建具体产品的对象。

5.简单工厂模式：专门定义一个类用来负责创建其他类的实例，被创建的实例通常都具有共同的父类。跟工厂模式的区别在于创建过程没有延迟到子类进行。
参考：https://www.cnblogs.com/zhili/p/SimpleFactory.html

二、抽象工厂模式（Abstract Factory Pattern）

1.定义：
提供一个创建一系列相关或者相互依赖对象的接口，而无需指定他们具体的类，当产品只有一个的时候，抽象工厂模式即变成工厂模式，当工厂模式的产品变为多个时，工厂模式即变成抽象工厂模式。

2.使用场景
何时使用：系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。
关键代码：在一个工厂里聚合多个同类产品。

3.优缺点
优点：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。
缺点：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象里加代码，又要在具体里加代码。

参考：https://www.cnblogs.com/zhili/p/AbstractFactory.html

三、单例模式（Singleton Pattern）

保证一个类仅有一个实例，并提供一个访问它的全局访问点。
关键代码：构造函数是私有的。

四、建造者模式（Builder Pattern）

1.定义：
又称生成器模式，将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。

二.使用场景：
何时使用：一些基本部件不会变，而其组合经常变化的时候。

使用场景：
需要生成的对象具有复杂的内部结构。
需要生成的对象内部属性本身相互依赖。
建造者模式在创建复杂对象时非常有用，特别是当对象的构建过程涉及多个步骤或参数时。它可以提供更好的灵活性和可维护性，同时使得代码更加清晰可读。

3.角色：
三个角色：建造者、具体的建造者、监工、使用者（严格来说不算）
建造者角色：定义生成实例所需要的所有方法；
具体的建造者角色：实现生成实例所需要的所有方法，并且定义获取最终生成实例的方法；
监工角色：定义使用建造者角色中的方法来生成实例的方法；
使用者：使用建造者模式。

4.注意事项：
定义中“将一个复杂的构建过程与其表示相分离”，表示并不是由建造者负责一切，而是由监工负责控制（定义）一个复杂的构建过程，由各个不同的建造者分别负责实现构建过程中所用到的所有构建步骤。
不然，就无法做到“使得同样的构建过程可以创建不同的表示”这一目标。

与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。

5.优缺点：
优点：
分离构建过程和表示，使得构建过程更加灵活，可以构建不同的表示。
可以更好地控制构建过程，隐藏具体构建细节。
代码复用性高，可以在不同的构建过程中重复使用相同的建造者。

缺点：
如果产品的属性较少，建造者模式可能会导致代码冗余。
建造者模式增加了系统的类和对象数量。

参考：https://www.cnblogs.com/zhili/p/BuilderPattern.html

五、原型模式（Prototype Pattern）

1.定义：
用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。

2.优缺点：
优点：
性能提高。
逃避构造函数的约束。

缺点： 配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 
必须实现 Cloneable 接口。

3.注意事项：
与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。

参考：https://www.cnblogs.com/zhili/p/PrototypePattern.html
