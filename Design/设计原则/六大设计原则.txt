六大设计原则主要是指：

1.单一职责原则(Single Responsibility Principle)		一个类或接口只承担一个职责。
2.开闭原则(Open Closed Principle)					对软件实体的改动，最好用扩展而非修改的方式。
3.里氏替换原则(Liskov Substitution Principle)		在继承类时，务必重写（override）父类中所有的方法，尤其需要注意父类的protected方法（它们往往是让你重写的），子类尽量不要暴露自己的public方法供外界调用。
4.迪米特法则(Law of Demeter)						又叫“最少知道法则”，尽量减少对象之间的交互，从而减小类之间的耦合。
5.接口隔离原则(Interface Segregation Principle)		不要对外暴露没有实际意义的接口。
6.依赖倒置原则(Dependence Inversion Principle)		高层模块不应该依赖于低层模块，而应该依赖于抽象。抽象不应依赖于细节，细节应依赖于抽象。

把这 6 个原则的首字母（里氏替换原则和迪米特法则的首字母重复，只取一个）联合起来就是：SOLID（稳定的），其代表的含义也就是把这 6 个原则结合使用的好处：建立稳定、灵活、健壮的设计。

一、单一职责原则
应该有且仅有一个原因引起类的变更，也就是一个接口或者类只能有一个职责，它就负责一件事情，另外，单一职责原则不仅适用于接口和类，也适用于方法。一个方法尽可能只做一件事。

二、开闭原则
开闭原则是指一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。也就是说一个软件实体应该通过扩展来实现变化，而不是通过修改已有的代码来实现变化。

三、里氏替换原则
里氏替换原则最正宗的定义是：如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代替o2时，程序P的行为没有发生变化，那么类型S是类型T的子类型。
通俗点讲，就是只要父类能出现的地方，子类就可以出现，而且替换为子类也不会产生任何错误或异常。

里氏替换原则为良好的继承定义了一个规范，一句简单的定义包含了4层含义：
1.子类必须完全实现父类的方法。在类中调用其他类时务必要使用父类或接口，如果不能使用父类或接口，则说明类的设计已经违背了LSP原则。
2.子类可以有自己的个性。
3.覆盖或实现父类的方法时，输入参数可以被放大。子类中方法的入参类型必须与父类中被覆写的方法的入参类型相同或更宽松。
4.覆盖或实现父类的方法时，输出结果可以被缩小。这句话的意思就是，父类的一个方法的返回值是类型T，子类的相同方法（重载或重写）的返回值为类型S，那么里氏替换原则就要求S必须小于等于T。
为什么呢？因为重写父类方法，父类和子类的同名方法的输入参数是相同的，两个方法的范围值S小于等于T，这是重写父类方法的要求。

四、迪米特法则
迪米特法则（LoD）也叫最少知道法则：一个对象应该对其他对象有最少的了解。
迪米特法则的核心观念就是类间解耦，弱耦合，只有弱耦合了以后，类的复用率才可以提升上去。

五、接口隔离原则
接口隔离原则就是客户端不应该依赖它不需要的接口，或者说类间的依赖关系应该建立在最小的接口上。使用多个专门的接口比使用单一的总接口要好。
也就是说不要让一个单一的接口承担过多的职责，而应把每个职责分离到多个专门的接口中，进行接口分离。过于臃肿的接口是对接口的一种污染。

六、依赖倒置原则
1. 模块间的依赖通过抽象发生，实现类之间不直接发生依赖关系，其依赖关系是通过接口或抽象类产生的；
2. 接口或抽象类不依赖于实现类；
3. 实现类依赖接口或抽象类。
说白了，就是“面向接口编程”。面向接口编程，而不是面向实现编程。

依赖倒置原则可以减少类间的耦合性，提高系统的稳定性，降低并行开发引起的风险，提高代码的可读性和可维护性。

参考：https://zhuanlan.zhihu.com/p/110130347