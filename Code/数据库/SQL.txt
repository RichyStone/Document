Test New Account

SQL

column1, column2, ...：要选择的字段名称，可以为多个字段。如果不指定字段名称，则会选择所有字段。
table_name：要查询的表名称。

1.SELECT 
SELECT column1, column2, ...FROM table_name;	

SELECT * FROM table_name;

2.Distinct
SELECT DISTINCT column1, column2, ...FROM table_name;

3.WHERE
SELECT column1, column2, ...FROM table_name WHERE condition;

WHERE 子句中的运算符
下面的运算符可以在 WHERE 子句中使用：

运算符		描述
=			等于
<>			不等于。注释：在 SQL 的一些版本中，该操作符可被写成 !=
>			大于
<			小于
>=			大于等于
<=			小于等于
BETWEEN		在某个范围内
LIKE		搜索某种模式
IN			指定针对某个列的多个可能值

4.逻辑判断

逻辑运算
And:与 同时满足两个条件的值。

Select * from emp where sal > 2000 and sal < 3000;
查询 EMP 表中 SAL 列中大于 2000 小于 3000 的值。

Or:或 满足其中一个条件的值

Select * from emp where sal > 2000 or comm > 500;
查询 emp 表中 SAL 大于 2000 或 COMM 大于500的值。

Not:非 满足不包含该条件的值。

select * from emp where not sal > 1500;
查询EMP表中 sal 小于等于 1500 的值。

逻辑运算的优先级：

()    not        and         or

5.特殊条件

1)空值判断： is null

Select * from emp where comm is null;
查询 emp 表中 comm 列中的空值。

2)between and (在 之间的值)

Select * from emp where sal between 1500 and 3000;
查询 emp 表中 SAL 列中大于 1500 的小于 3000 的值。

注意：大于等于 1500 且小于等于 3000， 1500 为下限，3000 为上限，下限在前，上限在后，查询的范围包涵有上下限的值。

3)In

Select * from emp where sal in (5000,3000,1500);
查询 EMP 表 SAL 列中等于 5000，3000，1500 的值。

4)like

Like模糊查询

Select * from emp where ename like 'M%';
查询 EMP 表中 Ename 列中有 M 的值，M 为要查询内容中的模糊信息。

 % 表示多个字值，_ 下划线表示一个字符；
 M% : 为能配符，正则表达式，表示的意思为模糊查询信息为 M 开头的。
 %M% : 表示查询包含M的所有内容。
 %M_ : 表示查询以M在倒数第二位的所有内容。
 
6.ORDER BY
ORDER BY 关键字用于对结果集按照一个列或者多个列进行排序。

ORDER BY 关键字默认按照升序对记录进行排序。如果需要按照降序对记录进行排序，您可以使用 DESC 关键字。

SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;

ASC：表示按升序排序。
DESC：表示按降序排序。

ORDER BY 多列的时候，eg:

order by A,B        这个时候都是默认按升序排列
order by A desc,B   这个时候 A 降序，B 升序排列
order by A ,B desc  这个时候 A 升序，B 降序排列
即 desc 或者 asc 只对它紧跟着的第一个列名有效，其他不受影响，仍然是默认的升序。

7.Limit

MySQL 里分页一般用 LIMIT 来实现:
select* from article LIMIT 1,3
与
select * from article LIMIT 3 OFFSET 1
上面两种写法都表示取 2、3、4 三条条数据：

当 LIMIT 后面跟两个参数的时候，第一个数表示要跳过的数量，后一位表示要取的数量，例如：
select* from article LIMIT 1,3 就是跳过 1 条数据，从第 2 条数据开始取，取 3 条数据，也就是取 2、3、4 三条数据。

当 LIMIT 后面跟一个参数的时候，该参数表示要取的数据的数量。
例如 select* from article LIMIT 3 表示直接取前三条数据，类似 sqlserver 里的 top 语法。

当 LIMIT 和 OFFSET 组合使用的时候，LIMIT 后面只能有一个参数，表示要取的的数量，OFFSET表示要跳过的数量 。
例如 select * from article LIMIT 3 OFFSET 1 表示跳过 1 条数据，从第 2 条数据开始取，取3条数据，也就是取 2、3、4 三条数据。

8.Insert
INSERT INTO 语句可以有两种编写形式。

第一种形式无需指定要插入数据的列名，只需提供被插入的值即可：
INSERT INTO table_name
VALUES (value1,value2,value3,...);

第二种形式需要指定列名及被插入的值：
INSERT INTO table_name (column1,column2,column3,...)
VALUES (value1,value2,value3,...);
参数说明：

table_name：需要插入新记录的表名。
column1, column2, ...：需要插入的字段名。
value1, value2, ...：需要插入的字段值。

9.Update

UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
参数说明：

table_name：要修改的表名称。
column1, column2, ...：要修改的字段名称，可以为多个字段。
value1, value2, ...：要修改的值，可以为多个值。
condition：修改条件，用于指定哪些数据要修改。

10.Delete

DELETE 语句用于删除表中的行。

SQL DELETE 语法
DELETE FROM table_name
WHERE condition;

参数说明：
table_name：要删除的表名称。
condition：删除条件，用于指定哪些数据要删除。

11.SQL关于删除的三个语句：DROP、TRUNCATE、 DELETE 的区别。

DROP:
DROP test;
删除表test，并释放空间，将test删除的一干二净。

TRUNCATE:
TRUNCATE test;
删除表test里的内容，并释放空间，但不删除表的定义，表的结构还在。

DELETE:
1、删除指定数据
删除表test中年龄等于30的且国家为US的数据

DELETE FROM test WHERE age=30 AND country='US';

2、删除整个表
仅删除表test内的所有内容，保留表的定义，不释放空间。
DELETE FROM test 或者 DELETE * FROM test;

相同点
truncate 和不带 where 子句的 delete, 以及 drop 都会删除表内的数据。

不同点:
1. truncate 和 delete 只删除数据不删除表的结构(定义) ，drop 语句将删除表的结构被依赖的约束(constrain), 触发器(trigger), 索引(index); 依赖于该表的存储过程/函数将保留, 但是变为 invalid 状态。

2.delete 语句是 dml, 这个操作会放到 rollback segement 中, 事务提交之后才生效; 如果有相应的 trigger, 执行的时候将被触发。 truncate, drop 是 ddl, 操作立即生效, 原数据不放到 rollback segment 中, 不能回滚。 操作不触发 trigger。

3.delete 语句不影响表所占用的 extent, 高水线(high watermark)保持原位置不动。 显然 drop 语句将表所占用的空间全部释放 。 truncate 语句缺省情况下见空间释放到 minextents 个 extent, 除非使用 reuse storage; truncate会将高水线复位(回到最开始)。

4.速度：一般来说: drop > truncate > delete 。

5.安全性: 小心使用 drop 和 truncate, 尤其没有备份的时候。否则哭都来不及。

使用上, 想删除部分数据行用 delete, 注意带上 where 子句。 回滚段要足够大。

想删除表, 当然用 drop。

想保留表而将所有数据删除。如果和事务无关, 用 truncate 即可。 如果和事务有关, 或者想触发 trigger, 还是用 delete。

如果是整理表内部的碎片, 可以用 truncate 跟上 reuse stroage, 再重新导入/插入数据。

mysql 中可以通过参数 sql_safe_updates 来限制 update/delete，防止全表更新或删除。

以下 3 种情况在采用此参数的情况下都不能正常进行操作：

 1: 没有加where条件的全表更新操作;
 2: 加了 where 条件字段，但是 where 字段没有走索引的表更新;
 3: 全表 delete 没有加 where 条件或者 where 条件没有走索引。
这三种情况下都会抛出异常，无法执行。
下面是 sql_safe_updates 变量为 0 和 1 时的取值说明：
sql_safe_updates 有两个取值 0 和 1， 即 off 和 on。
sql_safe_updates = 1 (或 sql_safe_updates = on ) 时，不带 where 和 limit 条件的 update 和 delete 操作语句是无法执行的，即使是有 where 和 limit 条件但不带 key column 限制条件的 update 和 delete 也不能执行。
sql_safe_updates = 0 (或 sql_safe_updates = off ) 时，无 where 和 limit 条件的 update 和 delete 操作将会顺利执行。
很显然，在一般的 mysql 中此参数的默认值是 1。
在 sql_safe_updates = on 时，采取删除或更新全表时抛出的错误码为 1175。

set sql_safe_updates=1;  // 安全模式打开状态
set sql_safe_updates=0;  // 安全模式关闭状态
如果设置了 sql_safe_updates=1，那么 update 语句必须满足如下条件之一才能执行成功：

 1) 使用 where 子句, 并且 where 子句中列必须为 prefix 索引列。
 2) 使用 limit。
 3) 同时使用 where 子句和 limit (此时 where 子句中列可以不是索引列)。
delete 语句必须满足如下条件之一才能执行成功。

 1) 使用 where 子句, 并且 where 子句中列必须为 prefix 索引列。
 2) 同时使用 where 子句和 limit (此时 where 子句中列可以不是索引列)。
 