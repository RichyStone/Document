数据转换

一、自定义转换器：
如果要绑定到的类型中提供了类型转换器，可以使用默认转换。此行为取决于目标中可用的类型转换器。如果无法确定，请创建自己的转换器。

1.通过实现 IValueConverter 接口来创建一个自定义转换器：

如果要将值转换器与绑定相关联，请创建实现 接口的 IValueConverter 类，然后实现 Convert 和 ConvertBack 方法。 转换器可以将数据从一种类型更改为另一种类型。

2.参数：
1）值转换器具有区域性感知能力。 Convert和 ConvertBack 方法都有一个culture参数，用于指示区域性信息。 如果区域性信息与转换无关，则可以在自定义转换器中忽略该参数。

2）Convert和 ConvertBack 方法还有一个名为 parameter 的参数，以便可以使用具有不同参数的转换器的同一实例。 例如，可以编写格式设置转换器，该转换器根据使用的输入参数生成不同的数据格式。 可以使用 ConverterParameter 类的 Binding 将参数作为参数传递给 Convert 和 ConvertBack 方法。

3.Convert方法：
数据绑定引擎在将值从绑定源传播到绑定目标时调用此方法。

数据绑定引擎不会捕获用户提供的转换器引发的异常。 方法引发 Convert 的任何异常或该方法调用的方法 Convert 引发的任何未捕获的异常都被视为运行时错误。 通过返回 DependencyProperty.UnsetValue处理预期问题。

4.ConvertBack方法：
数据绑定引擎在将值从绑定目标传播到绑定源时调用此方法。

此方法的实现必须是Convert方法的反函数。

二、下面提供了一些典型方案，在这些方案中，实现数据转换器非常有意义：

1.数据应根据区域性以不同方式显示。 例如，可能需要根据在特定区域性中使用的约定，实现货币转换器或日历日期/时间转换器。
2.使用的数据不一定会更改属性的文本值，但会更改其他某个值（如图像的源，或显示文本的颜色或样式）。 在这种情况下，可以通过转换可能不合适的属性绑定（如将文本字段绑定到表单元格的 Background 属性）来使用转换器。
3.多个控件或控件的多个属性会绑定到相同数据。 在这种情况下，主绑定可能仅显示文本，而其他绑定则处理特定的显示问题，但仍使用同一绑定作为源信息。
4.目标属性具有绑定集合，称为 MultiBinding。 对于 MultiBinding，使用自定义 IMultiValueConverter 从绑定的值中生成最终值。 例如，可以从红色、蓝色和绿色的值来计算颜色，这些值可能来自相同绑定源对象，也可能来自不同绑定源对象。