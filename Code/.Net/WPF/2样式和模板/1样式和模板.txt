样式设置和模板化

参考：
https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/controls/styles-templates-overview?view=netdesktop-6.0

Windows Presentation Foundation (WPF) 样式设置和模板化是指一套功能，这套功能使开发者和设计者能够为其产品创建极具视觉表现力的效果和一致的外观。
自定义应用的外观时，需要一个强大的样式设置和模板化模型，以便维护和共享应用内部和应用之间的外观。 WPF 就提供了这样的模型。
WPF 样式设置模型的另一项功能是将呈现与逻辑分离。

一、Style

1.定义
可以将 Style 视为一种将一组属性值应用到多个元素的便捷方法。 可以对从 FrameworkElement 或 FrameworkContentElement 派生的任何元素（如 Window 或 Button）使用样式。

声明样式的最常见方法是在 XAML 文件的 Resources 部分中声明为资源。 样式是一种资源，因此它们遵从适用于所有资源的相同范围规则。 简而言之，声明样式的位置会影响样式的应用范围。 例如，如果在应用定义 XAML 文件的根元素中声明样式，则该样式可以在应用中的任何位置使用。

样式由 <Setter> 子元素组成，这些元素在应用了样式的元素上设置属性。

2.扩展样式
也许你希望两个 TextBlock 元素共享某些属性值，如 FontFamily 和居中的 HorizontalAlignment。
可以通过创建基于第一个样式的新样式来实现此目的，如下所示。

<Window.Resources>
    <!-- .... other resources .... -->

    <!--A Style that affects all TextBlocks-->
    <Style TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="Comic Sans MS"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>
    
    <!--A Style that extends the previous TextBlock Style with an x:Key of TitleText-->
    <Style BasedOn="{StaticResource {x:Type TextBlock}}"
           TargetType="TextBlock"
           x:Key="TitleText">
        <Setter Property="FontSize" Value="26"/>
        <Setter Property="Foreground">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Offset="0.0" Color="#90DDDD" />
                        <GradientStop Offset="1.0" Color="#5BFFFF" />
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>
</Window.Resources>

此 TitleText 样式扩展为 TextBlock 类型创建的样式，该样式由 BasedOn="{StaticResource {x:Type TextBlock}}" 引用。 还可以使用样式的 x:Key 扩展具有 x:Key 的样式。 例如，如果有一个名为 Header1 的样式，并且你需要扩展该样式，可以使用 BasedOn="{StaticResource Header1}"。

3.TargetType 属性与 x:Key 属性之间的关系

将 TargetType 属性设置为 TextBlock 时，如果不为样式分配 x:Key，会导致将样式应用于所有 TextBlock 元素。 
在此情况下，x:Key 隐式设置为 {x:Type TextBlock}。 
这意味着，如果将 x:Key 值显式设置为除 {x:Type TextBlock} 以外的任何值，则 Style 不会自动应用于所有 TextBlock 元素。 
相反，必须将该样式（通过使用 x:Key 值）显式应用到 TextBlock 元素。 
如果你的样式位于资源部分中，并且你未对样式设置 TargetType 属性，则必须设置 x:Key 属性。

除了为 x:Key 提供默认值以外，TargetType 属性还指定 setter 属性应用到的类型。 
如果不指定 TargetType，则必须使用语法 Property="ClassName.Property"，通过类名称限定 Setter 对象中的属性。 
例如，必须将 Property 设置为 "TextBlock.FontSize" 或 "Control.FontSize"，而不是设置 Property="FontSize"。

另请注意，许多 WPF 控件由其他 WPF 控件的组合构成。 如果创建应用于某个类型的所有控件的样式，可能会产生意外结果。 
例如，如果创建一个样式，该样式以 Window中的 TextBlock 类型为目标，
那么，即使 TextBlock 是另一个控件（如 ListBox）的一部分，该样式也将应用于窗口中的所有 TextBlock 控件。

二、ControlTemplate

1.定义

在 WPF 中，控件的 ControlTemplate 用于定义控件的外观。 
可以通过定义新的 ControlTemplate 并将其分配给控件来更改控件的结构和外观。
在许多情况下，模板提供了足够的灵活性，从而无需自行编写自定义控件。

每个控件都有一个分配给 Control.Template 属性的默认模板。 该模板将控件的视觉呈现与控件的功能关联起来。 因为在 XAML 中定义了模板，所以无需编写任何代码即可更改控件的外观。 每个模板都是为特定控件（例如 Button）设计的。

通常在 XAML 文件的 Resources 部分中将模板声明为资源。与所有资源一样，将应用范围规则。

控件模板比样式复杂得多。这是因为控件模板重写了整个控件的视觉外观，而样式只是将属性更改应用于现有控件。
但是，控件模板是通过设置 Control.Template 属性来应用的，因此可以使用样式来定义或设置模板。

2.创建副本

注意：设计器通常允许创建现有模板的副本并进行修改。 例如，在 Visual Studio WPF 设计器中，选择一个 CheckBox 控件，然后右键单击并选择“编辑模板”>“创建副本” 。 此命令会生成一个用于定义模板的样式。

<Style x:Key="CheckBoxStyle1" TargetType="{x:Type CheckBox}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual1}"/>
    <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background1}"/>
    <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border1}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type CheckBox}">
                <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Border x:Name="checkBoxBorder" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <Grid x:Name="markGrid">
                            <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{StaticResource OptionMark.Static.Glyph1}" Margin="1" Opacity="0" Stretch="None"/>
                            <Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph1}" Margin="2" Opacity="0"/>
                        </Grid>
                    </Border>
                    <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="HasContent" Value="true">
                        <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual1}"/>
                        <Setter Property="Padding" Value="4,-1,0,0"/>

通过编辑模板副本可以很好地了解模板的工作原理。 与其新建一个空白模板，不如编辑副本并更改视觉呈现的某些方面来得简单。

3.示例

<ControlTemplate x:Key="roundbutton" TargetType="Button">
    <Grid>
        <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding Foreground}" />
        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
    </Grid>
</ControlTemplate>

1）TemplateBinding

创建新的 ControlTemplate 时，可能仍然想要使用公共属性更改控件外观。 
TemplateBinding 标记扩展将 ControlTemplate 中元素的属性绑定到由控件定义的公共属性。 
使用 TemplateBinding 时，可让控件属性用作模板参数。 换言之，设置控件属性后，该值将传递到包含 TemplateBinding 的元素。

对于模板方案来说，TemplateBinding 是绑定的优化形式，类似于使用 {Binding RelativeSource={RelativeSource TemplatedParent}} 构造的绑定。

椭圆形
请注意，<Ellipse> 元素的 Fill 和 Stroke 属性绑定到了控件的 Foreground 和 Background 属性。

2）ContentPresenter
此外，还将 <ContentPresenter> 元素添加到了模板。请注意该按钮继承自 ContentControl。 此按钮会显示该元素的内容。 可以在该按钮中设置任何内容，例如纯文本，甚至其他控件。 

若将 ControlTemplate 应用到 ContentControl 类型（例如 Button），将在元素树中搜索 ContentPresenter。 
若找到了 ContentPresenter，模板会自动将控件的 Content 属性绑定到 ContentPresenter。
同样，ItemsControl 的 ControlTemplate 中的 ItemsPresenter 将自动绑定到 ItemTemplate 和 Items 属性。

3）视觉状态：VisualState

<ControlTemplate x:Key="roundbutton" TargetType="Button">
    <Grid>
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup Name="CommonStates">
                <VisualState Name="Normal">
                    <Storyboard>
                        <ColorAnimation Storyboard.TargetName="backgroundElement" 
                            Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
                            To="{TemplateBinding Background}"
                            Duration="0:0:0.3"/>
                    </Storyboard>
                </VisualState>
                <VisualState Name="MouseOver">
                    <Storyboard>
                        <ColorAnimation Storyboard.TargetName="backgroundElement" 
                            Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" 
                            To="Yellow" 
                            Duration="0:0:0.3"/>
                    </Storyboard>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
        <Ellipse Name="backgroundElement" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding Foreground}" />
        <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" />
    </Grid>
</ControlTemplate>

三、DataTemplate

大多数控件都具有某些类型的内容，并且该内容通常来自要绑定到的数据。在 WPF 中，使用 DataTemplate 定义数据的视觉表示形式。基本上，放入 DataTemplate 的内容决定了数据在呈现的应用中的外观。

数据模板化模型提供其他功能。
例如，如果要使用 HeaderedItemsControl 类型（例如 Menu 或 TreeView）显示包含其他集合的集合数据，可以使用 HierarchicalDataTemplate。
另一个数据模板化功能是 DataTemplateSelector，该功能允许基于自定义逻辑选择要使用的 DataTemplate。

四、样式和模板之间的主要区别

1.Style和Template

样式只用来为一组相同控件设置统一的样式，只能改变控件的已有属性值（比如颜色字体）。
使用模板，您可以访问控件的更多部分而不是样式。您还可以指定控件的现有行为和新行为。

2.ControlTemplate和DataTemplate

DataTemplate用于为基础数据提供视觉结构，而ControlTemplate与基础数据无关，而只是为控件本身提供视觉布局。

DataTemplate控件树是ControlTemplate里面的一棵子树。 

决定【控件外观和行为的是ControlTemplate，使用TemplateBinding来绑定源对象的属性,例如{TemplateBinding Background} 】；
决定数据外观的是【DataTemplate，使用Binding来绑定数据对象的属性，例如{Binding PersonName}】，它的载体是ContentPresenter对象。

Control类

　　-Template属性（controlTemplate类型）

　　  -ContentPresenter

　　    -ContentTemplate（DataTemplate类型）

ControlTemplate内有一个ContentPresenter属性，这个ContentPresenter的ContentTemplate属性就是DataTemplate类型。