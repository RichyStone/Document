System.Threading.Timer 

1.定义：

System.Threading.Timer 是由线程池调用的。
所有的Timer对象只使用了一个线程来管理。这个线程知道下一个Timer对象在什么时候到期。下一个Timer对象到期时，线程就会唤醒，在内部调用ThreadPool 的 QueueUserWorkItem，将一个工作项添加到线程池队列中，使你的回调方法得到调用。

2.注意事项

注意：如果回调方法的执行时间很长，计时器可能（在上个回调还没有完成的时候）再次触发。这可能造成多个线程池线程同时执行你的回调方法。
注意：不能使用局部变量来创建指向一个线程定时器。因为局部变量会被GC回收，导致定时器失效。

3.构造函数

callback : 一个Object 类型参数的委托，周期调用的函数。
state: callback 委托调用时的参数。
dueTime: 定时器延时多久开始调用。单位 毫秒
period: 定时器每隔多久调用一次。单位 毫秒

4.停止调用

使用Disponse停止定时器
如果Timer 不会再使用 则可以 使用 Dispose 方法来停止定时器。
如果定时器运行到中途。使用Dispose方法后，callback还是会执行完一个完整的生命周期，不会中途停止。并且Dispose方法不会等待 callback的这次调用完成。只是定时器下次不再调用 callback。

使用Change停止定时器
把 dueTime 参数置为-1就可以停止定时器。同样的，它不会中断在运行中的callback，只是下一次不再回调。 这个方法停止的定时器 还可以使用Change 再次利用定时器。
