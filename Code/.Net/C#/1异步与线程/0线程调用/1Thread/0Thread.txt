System.Threading.Thread 类用于线程的工作。它允许创建并访问多线程应用程序中的单个线程。进程中第一个被执行的线程称为主线程。
当 C# 程序开始执行时，主线程自动创建。使用 Thread 类创建的线程被主线程的子线程调用。可以使用 Thread 类的 CurrentThread 属性访问线程。

1.构造函数
https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.-ctor?redirectedfrom=MSDN&view=net-6.0#System_Threading_Thread__ctor_System_Threading_ThreadStart_System_Int32_

线程结束的条件：线程构造函数传入的委托结束了执行，线程一旦结束就无法再重启。

2.属性

非静态属性：
IsBackground		获取或设置一个值，该值指示某个线程是否为后台线程，一旦主线程结束后整个程序结束，不管后台线程是否完成
IsAlive				开始执行即为TRUE，线程结束即为FALSE
Name				通常用于调试，只能设置一次，更改会抛异常
Priority			获取或设置一个值，该值指示线程的调度优先级
CurrentCulture		获取或设置当前线程的区域性
ExecutionContext	获取一个 ExecutionContext 对象，该对象包含有关当前线程的各种上下文的信息
IsThreadPoolThread	获取一个值，该值指示线程是否属于托管线程池
ManagedThreadId		获取当前托管线程的唯一标识符

静态属性
Thread.CurrentThread		返回当前执行的线程
Thread.CurrentContext		获取线程正在其中执行的当前上下文
Thread.CurrentPrincipal		获取或设置线程的当前负责人（对基于角色的安全性而言），是.NET应用程序表示运行该进程的用户或服务帐户的标识的方式

3.函数
public void Start()				Thread初始化之后 调用Start表示开始执行线程
public static void Sleep()		让线程暂停一段时间。
public void Abort()				在调用此方法的线程上引发 ThreadAbortException，以开始终止此线程的过程。调用此方法通常会终止线程。
public static void ResetAbort()	取消为当前线程请求的 Abort
public void Join()				在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻塞调用其他线程，只有当前线程结束之后才允许调用其他线程
public void Interrupt()			中断处于 WaitSleepJoin 线程状态的线程

其余方法：https://www.cnblogs.com/GaoUpUp/p/17187804.html

4.线程终止

1.Join 			阻塞
2.Interrupt 	中断线程，抛出ThreadInterruptedException，如果线程中While(true),必须Thread.Sleep(0也可以),才能中断，否则线程过于繁忙，不会执行中断
3.Abort			直接干掉，暴力不安全，资源可能不释放，线程当前状态不确定