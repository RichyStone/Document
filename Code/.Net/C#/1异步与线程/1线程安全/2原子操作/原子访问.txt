原子访问InterLock

1.Interlocked的特点
Interlocked是为多个线程共享的变量提供原子操作，这个类是一个静态类，它提供了以线程安全的方式递增、递减、交换和读取值的方法。
如果你想锁定的对象是基本数据类型，那么请使用这个类。

它的特点是：
(1)、相对于其他线程同步技术，速度会快很多。（它的原子操作是基于CPU本身的，非阻塞的，所以要比lock的效率高。）
(2)、只能用于简单的同步问题。（数学运算操作仅限于Increment、Decrement以及Add）

2.原子操作
如果一条语句在底层处理器上被当作一个独立不可分割的指令，那么它本质上是原子的（atomic）。严格的原子性可以阻止任何抢占的可能。
对于 32位（或更低）的字段的简单读写总是原子的。
而操作 64 位字段仅在 64 位运行时环境下是原子的，并且结合了多个读写操作的语句必然不是原子的.
32位和64位代表cpu一次处理数据的能力是32位还是64位，当32位机器操作64位字段，如果此时发生了时间片轮询，则此时对64位的操作就不是原子操作

3.Interlocked的方法和作用
CompareExchange()	安全比较两个值是不是相等。如果相等，将第三个值于其中一个值交换
Decrement()			安全递减1,相当于 i--
Exchange()			安全交换：把值2赋给值1；返回新值
Increment()			安全递加1,相当于 i++
Add()				安全相加一个数值,相当于 a = a + 3
Read()				安全读取数值，相等于int a=b

https://blog.csdn.net/SmillCool/article/details/127118858