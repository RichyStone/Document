临界区（Critical Section）
保证在某一时刻只有一个线程能访问数据的简便办法。在任意时刻只允许一个线程对共享资源进行访问。
如果有多个线程试图同时访问临界区，那么在有一个线程进入后其他所有试图访问此临界区的线程将被挂起，并一直持续到进入临界区的线程离开。
临界区在被释放后，其他线程可以继续抢占，并以此达到用原子方式操作共享资源的目的。c#中的lock、Monitor、ReadWriterLock属于临界区。

一.Lock

当不同的线程都需要访问某个资源的时候，我们要使该资源在同一时刻只能被一个线程操作，以确保每个操作都是有效即时的。
lock是C#中最常用的同步方式，格式为lock(objectA){codeB} 。
lock关键字是Monitor的语法糖

lock(objectA){codeB} 看似简单，实际上有三个意思，这对于适当地使用它至关重要：
1. objectA被lock了吗？没有则由我来lock，否则一直等待，直至objectA被释放。
2. lock以后在执行codeB的期间其他线程不能调用codeB，也不能使用objectA。
3. 执行完codeB之后释放objectA，并且codeB可以被其他线程访问。

某些系统类提供专门用于锁定的成员。例如，Array 类型提供 SyncRoot。许多集合类型也提供 SyncRoot。
而自定义类推荐用私有的只读静态对象，比如：
private static readonly object obj = new object();

注意：lock关键字不能跨线程使用，因为它是针对线程上的锁。下面的代码是不被允许的（异步代码可能在await前后切换线程）
lock(typeof(Program))
{
	await Task.Run(()=>{});
}

参考资料网址：
https://www.cnblogs.com/apsnet/archive/2012/07/08/2581475.html
https://www.cnblogs.com/jintianhu/archive/2010/11/19/1881494.html

二、Monitor

注意：Monitor是针对线程上锁的，不能跨线程使用

1.Monitor特点
它使用独占锁的方式控制线程同步，一个线程只有得到这把锁才可以对该对象进行操作，对象锁机制保证了同一时刻只有一个线程可以访问这个对象
注：一定是锁定引用类型，值类型被锁会有装箱操作，下次再次锁这个值又将装箱成一个新的对象，导致报错

2.Monitor和Lock的关系
其实Lock在IL代码中会被翻译成Monitor。也就是Monitor.Enter(obj)和Monitor.Exit(obj).

Lock(obj)
{
 ....
}
等同于
try
{
        Monitor.Enter(obj,ref lockTaken)
        ....
}catch()
{

}finally
{
   if(lockTaken)
        Monitor.Exit(obj);
}

3.函数

Enter(Object)
在指定对象上获取排他锁。

Exit(Object)
释放指定对象上的排他锁。

Wait(Object)		
释放对象上的锁并阻止当前线程，直到它重新获取该锁。

Pulse(Object)	
通知等待队列中的线程锁定对象状态的更改。只有锁的当前所有者可以使用，发出等待对象的Pulse信号。
当前在指定对象上拥有锁的线程调用此方法，以向下一个线程发出锁定信号。收到脉冲后，等待线程将移动到就绪队列。 
当调用Pulse的线程释放锁时，就绪队列中的下一个线程 (该线程不一定是) 获取锁的脉冲线程。

PulseAll(Object)	
通知所有的等待线程对象状态的更改。当前在指定对象上拥有锁的线程调用此方法，以向等待获取对象锁的所有线程发出信号。 发送信号后，等待线程将移动到就绪队列。
调用 PulseAll 的线程释放锁时，就绪队列中的下一个线程获取锁。

Wait(Object, Int32)
释放对象上的锁并阻止当前线程，直到它重新获取该锁。如果已用指定的超时时间间隔，则线程进入就绪队列。

IsEntered(Object)
确定当前线程是否保留指定对象上的锁。

TryEnter(Object, Boolean)
尝试获取指定对象上的排他锁，并自动设置一个值，指示是否获取了该锁。

4.Wait和Pulse
同步的某一个对象包含若干引用，这些引用被处于三个状态的线程队列所占据，
这三个队列分别是：拥有锁的线程(处于执行中)、就绪队列(马上就可以获得锁的)、等待队列（wait中即阻塞的，需要进入就绪队列才拿到锁）。
执行流向：等待队列---》就绪队列---》拥有锁的线程

Monitor.Wait(lockObj)：
让自己休眠并让出锁给其他线程用（其实就是发生了阻塞），直到其他在锁内的线程发出脉冲（Pulse/PulseAll）后才可从休眠中醒来开始竞争锁。Monitor.Wait(lockObj,2000)则可以指定最大的休眠时间，如果时间到还没有被唤醒那么就自己醒。
注意： Monitor.Wait有返回值，当自己醒的时候返回false，当其他线程唤醒的时候返回true，这主要是用来防止线程锁死，返回值可以用来判断是否向后执行或者是重新发起Monitor.Wait(lockObj)

当拥有锁的线程执行完毕让出了锁，就绪队列的线程才有机会一窝蜂上去抢，锁只有一个，抢不到的继续在就绪队列里等待下一次机会，如此，直到就绪队列里的线程全部执行完。

问题来了：等待队列的线程如何进入就绪队列，以便得到执行机会呢？
基本途径就是：Monitor.Pulse() 或 超时自动进入。

所以Monitor.Pulse()的意义在于：将等待队列中的下一个线程放入就绪队列。（PulseAll()则是所有）。当然，如果等待队列里是空的，则不处理Pulse。

不调用Pulse()造成的后果，需要看等待队列中wait的超时设置，即”等待的最长时间“。
等待的最长时间有几个设置：无限期（Infinite）、某一时长、0。

造成的后果由这个决定：
1、 Infinite：无限期等待状态下，如果当前获得锁的线程不执行Pulse()，那么本线程一直处于阻塞状态，在等待队列中，得不到执行机会；
2、某一时长：则两个情况：
a)在该时间内，还没有超时，如果当前执行线程有Pulse()，那么本线程有机会进入就绪队列。如果当前执行线程不调用Pulse()，则本线程依然呆在等待队列；
b)超过时长，这个线程会自动进入就绪队列，无需当前获得锁的线程执行Pulse（）；
3、0：等待时长为零，则调用wait之后的线程直接进入就绪队列而不是等待队列。

原文链接：https://blog.csdn.net/SmillCool/article/details/127124723

三、ReaderWriterLockSlim

1.定义：

Monitor实现的是在读写两种情况的临界区中只可以让一个线程访问，那么如果业务中存在”读取密集型“操作，就好比数据库一样，读取的操作永远比写入的操作多。
针对这种情况，使用Monitor的话不合理，不过没关系，ReadWriterLock[Slim]实现了”写入串行“，”读取并行“。
“读“和“写”锁是不能并行的，他们之间相互竞争，同一时间，里面可以有一批“读”锁或一个“写”锁 ，其他的则不允许。

读写锁是以 ReaderWriterLockSlim 对象作为锁管理资源的
不同的 ReaderWriterLockSlim对象中锁定同一个文件也会被视为不同的锁进行管理，这种差异可能会再次导致文件的并发写入问题，所以 ReaderWriterLockSlim 应尽量定义为只读的静态对象。

2.方法

ReaderWriterLockSlim 类支持三种锁定模式：Read，Write，UpgradeableRead。
这三种模式对应的方法分别是 EnterReadLock，EnterWriteLock，EnterUpgradeableReadLock 。
再就是与此对应的 TryEnterReadLock，TryEnterWriteLock，TryEnterUpgradeableReadLock，ExitReadLock，ExitWriteLock，ExitUpgradeableReadLock。

Read 和 Writer 锁定模式比较简单易懂：

Read 模式是典型的共享锁定模式，任意数量的线程都可以在该模式下同时获得锁；
Writer 模式则是互斥模式，在该模式下只允许一个线程进入该锁。
UpgradeableRead 锁定模式可能对于大多数人来说比较新鲜，但是在数据库领域却众所周知。

1、对于同一把锁、多个线程可同时进入读模式。
2、对于同一把锁、同时只允许一个线程进入写模式。
3、对于同一把锁、同时只允许一个线程进入可升级的读模式

在任何时候都只能有一个线程处于写入模式。 
当线程处于写入模式时，任何其他线程都不能在任何模式下进入锁定状态。 
在任何时候，只能有一个线程处于可升级模式。 
任意数量的线程都可以处于读取模式，并且在其他线程处于读取模式时，可以有一个处于可升级模式的线程。

3.备注及注意事项

对于同一把锁、多个线程可同时进入 读模式。
对于同一把锁、同时只允许一个线程进入 写模式。
对于同一把锁、同时只允许一个线程进入 可升级的读模式。
对于同一把锁、同一线程不可两次进入同一锁状态（开启递归后可以）
对于同一把锁、即便开启了递归、也不可以在进入读模式后再次进入写模式或者可升级的读模式（在这之前必须退出读模式）。
读写锁具有线程关联性，即 两个线程间拥有的锁的状态 相互独立不受影响、并且不能相互修改其锁的状态。
升级状态：在进入可升级的读模式 EnterUpgradeableReadLock  后，可在恰当时间点 通过 EnterWriteLock 进入写模式。
降级状态：可升级的读模式可以降级为读模式：即 在进入可升级的读模式 EnterUpgradeableReadLock  后，通过首先调用读取模式 EnterReadLock 方法，然后再调用 ExitUpgradeableReadLock 方法。 


参考资料网址：
https://www.cnblogs.com/gougou1981/p/12370992.html#:~:text=ReaderWr,%E5%8F%96%2C%E4%BB%A5%E5%8F%8A%E7%8B%AC%E5%8D%A0%E5%86%99%E3%80%82
https://www.cnblogs.com/Tench/p/CSharpSimpleFileWriteLock.html
https://blog.csdn.net/u010476739/article/details/104937749
