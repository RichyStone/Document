UML——Unified modeling language 

UML(统一建模语言)，是一种用于软件系统分析和设计的语言工具，它用于帮助软件开发人员进行思考和记录思路的结果

在UML类图中，常见的有以下几种关系:
泛化（Generalization）, 实现（Realization）,关联（Association）,聚合（Aggregation）,组合(Composition)，依赖(Dependency)。

1、泛化关系（generalization）

泛化关系其实就是继承关系：指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加自己额外的一些功能，继承是类与类或者接口与接口之间最常见的关系；
在UML类图中，继承通常使用 空心三角+实线 表示

2、实现关系（realization）

实现关系：指的是一个class类实现 interface接口（可以实现多个接口）的功能；实现是类与接口之间最常见的关系；
在UML类图中，实现通常使用空心三角+虚线表示

3、依赖关系（dependent）

依赖关系：指的是类与类之间的联接。依赖关系表示一个类依赖于另一个类的定义。一般而言，依赖关系体现为成员变量、局域变量、方法的形参、方法返回值，或者对静态方法的调用。
表示一个A类依赖于B类的定义,如果A对象离开B对象,A对象就不能正常编译,则A对象依赖于B对象(A类中使用到了B对象)；
比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖； 表现在代码层面，类B作为参数被类A在某个method方法中使用。
在UML类图中，依赖通常使用虚线箭头表示

4、关联关系（association）

关联关系：指的是类与类之间的联接，它使一个类知道另一个类的属性和方法（实例变量体现）。A类依赖于B对象,并且把B作为A的一个成员变量, 则A和B存在关联关系.
关联可以是双向的，也可以是单向的。两个类之前是一个层次的，不存在部分跟整体之间的关系。
在UML类图中，关联通常使用实线箭头表示

按照多重性分类：
一对一：一个A对象属于一个B对象，一个B对象属于一个A对象。
一对多：一个A对象包含多个B对象。
多对一：多个A对象属于一个B对象，并且多个A对象中的每个A对象只能属于一个B对象。
多对多：一个A对象属于多个B对象，一个B对象属于多个A对象。

按照导航性分类：
单向：只能从A通过属性导航到B，B不能导航到A。
双向：A可以通过属性导航到B，B也可以通过属性导航到A。

关联关系的判断方法：
判断都是从对象的实例上面来看的
判断关系必须确定一对属性
判断关系必须确定具体需求

5、聚合关系（aggregtion）

聚合关系是关联关系的一种特例，他体现的是整体与部分，是一种“弱拥有”的关系，即has-a的关系。聚合是整体和个体之间的关系。
例如，汽车类与引擎类、轮胎类，以及其它的零件类之间的关系便整体和个体的关系。

与关联关系一样，聚合关系 也是通过实例变量实现的。但是关联关系所涉及的两个类是处在同一层次上的，而在聚合关系中，两个类是处在不平等层次上的，一个代表整体，另一个代表部分。
聚合关系表示整体和个体的关系，整体和个体可以相互独立存在，一定是有两个模块分别管理整体和个体。
在UML类图中，聚合通常使用空心菱形+实线箭头表示

6、组合关系（composition）

组合关系是关联关系的一种特例，他体现的是一种contains-a(包含)的关系，这种关系比聚合更强，也称为强聚合。
它要求普通的聚合关系中代表整体的对象负责代表部分对象的生命周期，组合关系是不能共享的。代表整体的对象需要负责保持部分对象和存活，在一些情况下将负责代表部分的对象湮灭掉。代表整体的对象可以将代表部分的对象传递给另一个对象，由后者负责此对象的生命周期。换言之，代表部分的对象在每一个时刻只能与一个对象发生组合关系，由后者排他地负责生命周期。部分和整体的生命周期一样。
整体和个体不能独立存在，一定是在一个模块中同时管理整体和个体，生命周期必须相同(级联)。
在UML类图中，组合通常使用实心菱形+实线箭头表示

参考文档：
https://blog.csdn.net/m0_37989980/article/details/104470064
https://zhuanlan.zhihu.com/p/431824956